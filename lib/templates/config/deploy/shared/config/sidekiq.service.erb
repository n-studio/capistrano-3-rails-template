#
# systemd unit file for Ubuntu 18.04
#
# Customize this file based on your bundler location, app directory, etc.
# Put this in /etc/systemd/system (Ubuntu).
# Run:
#   - systemctl enable sidekiq_<%= fetch(:full_app_name) %>
#   - systemctl {start,stop,restart} sidekiq_<%= fetch(:full_app_name) %>
#
# This file corresponds to a single Sidekiq process.  Add multiple copies
# to run multiple processes (sidekiq-1, sidekiq-2, etc).
#
# See Inspeqtor's Systemd wiki page for more detail about Systemd:
# https://github.com/mperham/inspeqtor/wiki/Systemd
#
[Unit]
Description=sidekiq_<%= fetch(:full_app_name) %>
# start us only once the network and logging subsystems are available,
# consider adding redis-server.service if Redis is local and systemd-managed.
After=syslog.target network.target

# See these pages for lots of options:
# http://0pointer.de/public/systemd-man/systemd.service.html
# http://0pointer.de/public/systemd-man/systemd.exec.html
[Service]
Type=simple
WorkingDirectory=<%= current_path %>
# If you use rbenv:
ExecStart=/bin/bash -lc '/home/<%= fetch(:deploy_user) %>/.rbenv/shims/bundle exec sidekiq -e <%= "#{fetch(:rails_env)}" %> -C $APP_ROOT/config/sidekiq.yml -i 0'
User=<%= fetch(:deploy_user) %>
Group=<%= fetch(:deploy_user) %>
UMask=0002

# Greatly reduce Ruby memory fragmentation and heap usage
# https://www.mikeperham.com/2018/04/25/taming-rails-memory-bloat/
Environment=MALLOC_ARENA_MAX=2

# if we crash, restart
RestartSec=1
Restart=on-failure

# output goes to /var/log/syslog
StandardOutput=syslog
StandardError=syslog

# This will default to "bundler" if we don't specify it
SyslogIdentifier=sidekiq_<%= fetch(:full_app_name) %>

[Install]
WantedBy=multi-user.target
