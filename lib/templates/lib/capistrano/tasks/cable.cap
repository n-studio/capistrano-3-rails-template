namespace :load do
  task :defaults do
    set :cable_pid, -> { File.join(current_path, "tmp", "pids", "cable.pid") }
    set :cable_config_path, -> { File.join(current_path, "cable", "config.ru") }
    set :cable_state, -> { File.join(shared_path, 'tmp', 'pids', 'cable.state') }
    set :cable_env, -> { fetch(:rack_env, fetch(:rails_env, fetch(:stage))) }
    set :cable_port, -> { "28080" }
  end
end

namespace :cable do
  desc "Start the Action Cable server"
  task :start do
    on roles(:ws) do |server|
      sudo "/usr/sbin/service actioncable_#{fetch(:full_app_name)} start"
    end
  end
  
  %w[halt stop status restart].map do |command|
    desc "#{command} the Action Cable server"
    task command do
      on roles(:ws) do |server|
        sudo "/usr/sbin/service actioncable_#{fetch(:full_app_name)} #{command}"
      end
    end
  end
  
  desc "Enable Action cable service"
  task :enable do
    on roles(:app) do |server|
      smart_template "config/sidekiq.service", "config/actioncable_#{fetch(:full_app_name)}.service"
      sudo "/bin/systemctl enable #{shared_path}/config/actioncable_#{fetch(:full_app_name)}.service"
    end
  end
  
  desc "Disable Action cable service"
  task :disable do
    on roles(:app) do |server|
      sudo "/bin/systemctl disable actioncable_#{fetch(:full_app_name)}.service"
    end
  end
end

namespace :deploy do
  after :publishing, :restart_cable do
    invoke 'cable:restart'
  end
end
